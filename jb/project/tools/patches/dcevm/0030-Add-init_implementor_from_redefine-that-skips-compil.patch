From e3b94671ce5108a91e3a3e92b01eea07731c7639 Mon Sep 17 00:00:00 2001
From: Vladimir Dvorak <lada.dvorak7@gmail.com>
Date: Sat, 11 Apr 2020 17:52:13 +0200
Subject: [PATCH 30/48] Add init_implementor_from_redefine, that skips compiler
 lock assert

---
 src/hotspot/share/oops/instanceKlass.cpp               | 10 +++++++++-
 src/hotspot/share/oops/instanceKlass.hpp               |  1 +
 .../share/prims/jvmtiEnhancedRedefineClasses.cpp       |  2 +-
 3 files changed, 11 insertions(+), 2 deletions(-)

diff --git a/src/hotspot/share/oops/instanceKlass.cpp b/src/hotspot/share/oops/instanceKlass.cpp
index 8cbd4b8edf2..c04bdf5abfc 100644
--- a/src/hotspot/share/oops/instanceKlass.cpp
+++ b/src/hotspot/share/oops/instanceKlass.cpp
@@ -789,7 +789,7 @@ bool InstanceKlass::link_class_impl(bool throw_verifyerror, TRAPS) {
     if (!is_linked()) {
       if (!is_rewritten()) {
         // In cases, if class A is being redefined and class B->A (B is extended from A) and B is host class of anonymous class C
-        // then second redefinition fails with cannot cast klass exception. So we currently turn off bytecode verification 
+        // then second redefinition fails with cannot cast klass exception. So we currently turn off bytecode verification
         // on redefinition.
         if (!newest_version()->is_redefining()) {
           bool verify_ok = verify_code(throw_verifyerror, THREAD);
@@ -1139,6 +1139,14 @@ void InstanceKlass::init_implementor() {
   }
 }
 
+void InstanceKlass::init_implementor_from_redefine() {
+  assert(is_interface(), "not interface");
+  Klass** addr = adr_implementor();
+  assert(addr != NULL, "null addr");
+  if (addr != NULL) {
+    *addr = NULL;
+  }
+}
 
 void InstanceKlass::process_interfaces(Thread *thread) {
   // link this class into the implementors list of every interface it implements
diff --git a/src/hotspot/share/oops/instanceKlass.hpp b/src/hotspot/share/oops/instanceKlass.hpp
index 2cc98b636f1..e8107a39813 100644
--- a/src/hotspot/share/oops/instanceKlass.hpp
+++ b/src/hotspot/share/oops/instanceKlass.hpp
@@ -1020,6 +1020,7 @@ public:
   int  nof_implementors() const;
   void add_implementor(Klass* k);  // k is a new class that implements this interface
   void init_implementor();           // initialize
+  void init_implementor_from_redefine();           // initialize
 
   // link this class into the implementors list of every interface it implements
   void process_interfaces(Thread *thread);
diff --git a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
index f6d2d3a40fe..aac9ba0911f 100644
--- a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
+++ b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
@@ -1416,7 +1416,7 @@ void VM_EnhancedRedefineClasses::ClearCpoolCacheAndUnpatch::do_klass(Klass* k) {
     Klass* implKlass = ik->implementor();
     if (implKlass != NULL && implKlass != ik && implKlass->new_version() != NULL) {
       InstanceKlass* newest_impl = InstanceKlass::cast(implKlass->newest_version());
-      ik->init_implementor();
+      ik->init_implementor_from_redefine();
       if (newest_impl->implements_interface(ik)) {
         ik->add_implementor(newest_impl);
       }
-- 
2.24.3 (Apple Git-128)

