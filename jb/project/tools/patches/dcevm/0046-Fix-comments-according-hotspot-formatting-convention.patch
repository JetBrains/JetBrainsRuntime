From d3371d7d52bd4dc66efd4f6a946d5045b8bc8b2b Mon Sep 17 00:00:00 2001
From: Vladimir Dvorak <lada.dvorak7@gmail.com>
Date: Sat, 23 May 2020 10:17:56 +0200
Subject: [PATCH 46/48] Fix comments according hotspot formatting conventions

---
 .../prims/jvmtiEnhancedRedefineClasses.cpp    | 191 +++++++-----------
 .../prims/jvmtiEnhancedRedefineClasses.hpp    |  41 ++--
 2 files changed, 90 insertions(+), 142 deletions(-)

diff --git a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
index 2321483dcbd..8d00203fd9a 100644
--- a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
+++ b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
@@ -67,21 +67,19 @@ int         VM_EnhancedRedefineClasses::_deleted_methods_length  = 0;
 int         VM_EnhancedRedefineClasses::_added_methods_length    = 0;
 Klass*      VM_EnhancedRedefineClasses::_the_class_oop = NULL;
 
-/**
- * Create new instance of enhanced class redefiner.
- *
- * This class implements VM_GC_Operation - the usual usage should be:
- *     VM_EnhancedRedefineClasses op(class_count, class_definitions, jvmti_class_load_kind_redefine);
- *     VMThread::execute(&op);
- * Which
- *
- * @param class_count size of class_defs
- * @param class_defs class definition - either new class or redefined class
- *               note that this is not the final array of classes to be redefined
- *               we need to scan for all affected classes (e.g. subclasses) and
- *               caculcate redefinition for them as well.
- * @param class_load_kind always jvmti_class_load_kind_redefine
- */
+//
+// Create new instance of enhanced class redefiner.
+//
+// This class implements VM_GC_Operation - the usual usage should be:
+//     VM_EnhancedRedefineClasses op(class_count, class_definitions, jvmti_class_load_kind_redefine);
+//     VMThread::execute(&op);
+// Which
+//  - class_count size of class_defs
+//  - class_defs class definition - either new class or redefined class
+//               note that this is not the final array of classes to be redefined
+//               we need to scan for all affected classes (e.g. subclasses) and
+//               caculcate redefinition for them as well.
+// @param class_load_kind always jvmti_class_load_kind_redefine
 VM_EnhancedRedefineClasses::VM_EnhancedRedefineClasses(jint class_count, const jvmtiClassDefinition *class_defs, JvmtiClassLoadKind class_load_kind) :
         VM_GC_Operation(Universe::heap()->total_collections(), GCCause::_heap_inspection, Universe::heap()->total_full_collections(), true) {
   _affected_klasses = NULL;
@@ -97,12 +95,10 @@ static inline InstanceKlass* get_ik(jclass def) {
   return InstanceKlass::cast(java_lang_Class::as_Klass(mirror));
 }
 
-/**
- * Start the redefinition:
- * - Load new class definitions - @see load_new_class_versions
- * - Start mark&sweep GC.
- * @return true if success, otherwise all chnages are rollbacked.
- */
+// Start the redefinition:
+// - Load new class definitions - @see load_new_class_versions
+// - Start mark&sweep GC.
+// - true if success, otherwise all chnages are rollbacked.
 bool VM_EnhancedRedefineClasses::doit_prologue() {
 
   if (_class_count == 0) {
@@ -175,9 +171,7 @@ bool VM_EnhancedRedefineClasses::doit_prologue() {
   return true;
 }
 
-/**
- * Closer for static fields - copy value from old class to the new class.
- */
+// Closer for static fields - copy value from old class to the new class.
 class FieldCopier : public FieldClosure {
   public:
   void do_field(fieldDescriptor* fd) {
@@ -236,9 +230,7 @@ struct StoreNoBarrier {
   template <class T> static void oop_store(T* p) { RawAccess<>::oop_store(p, oop(NULL)); }
 };
 
-/**
-  Closure to scan all heap objects and update method handles
-*/
+// Closure to scan all heap objects and update method handles
 template <class S>
 class ChangePointersOopClosure : public BasicOopIterateClosure {
   // import java_lang_invoke_MemberName.*
@@ -247,7 +239,6 @@ class ChangePointersOopClosure : public BasicOopIterateClosure {
     REFERENCE_KIND_MASK  = java_lang_invoke_MemberName::MN_REFERENCE_KIND_MASK,
   };
 
-
   bool update_member_name(oop obj) {
     int flags    =       java_lang_invoke_MemberName::flags(obj);
     int ref_kind =       (flags >> REFERENCE_KIND_SHIFT) & REFERENCE_KIND_MASK;
@@ -382,14 +373,12 @@ class ChangePointersOopClosure : public BasicOopIterateClosure {
   }
 };
 
-/**
- * Closure to scan all objects on heap for objects of changed classes
- *   - if the fields are compatible, only update class definition reference
- *   - otherwise if the new object size is smaller then old size, reshufle
- *          the fields and fill the gap with "dead_space"
- *   - otherwise set the _needs_instance_update flag, we need to do full GC
- *          and reshuffle object positions durring mark&sweep
- */
+// Closure to scan all objects on heap for objects of changed classes
+//  - if the fields are compatible, only update class definition reference
+//  - otherwise if the new object size is smaller then old size, reshufle
+//         the fields and fill the gap with "dead_space"
+//  - otherwise set the _needs_instance_update flag, we need to do full GC
+//         and reshuffle object positions durring mark&sweep
 class ChangePointersObjectClosure : public ObjectClosure {
   private:
 
@@ -451,19 +440,16 @@ public:
 };
 
 
-/**
-  Main transformation method - runs in VM thread.
-
-  - UseSharedSpaces - TODO what does it mean?
-  - for each sratch class call redefine_single_class
-  - clear code cache (flush_dependent_code)
-  - iterate the heap and update object defintions, check it old/new class fields
-       are compatible. If new class size is smaller then old, it can be solved directly here.
-  - iterate the heap and update method handles to new version
-  - Swap marks to have same hashcodes
-  - copy static fields
-  - notify JVM of the modification
-*/
+// Main transformation method - runs in VM thread.
+//  - UseSharedSpaces - TODO what does it mean?
+//  - for each sratch class call redefine_single_class
+//  - clear code cache (flush_dependent_code)
+//  - iterate the heap and update object defintions, check it old/new class fields
+//       are compatible. If new class size is smaller then old, it can be solved directly here.
+//  - iterate the heap and update method handles to new version
+//  - Swap marks to have same hashcodes
+//  - copy static fields
+//  - notify JVM of the modification
 void VM_EnhancedRedefineClasses::doit() {
   Thread *thread = Thread::current();
 
@@ -634,11 +620,9 @@ void VM_EnhancedRedefineClasses::doit() {
 
 }
 
-/**
- * Cleanup - runs in JVM thread
- *  - free used memory
- *  - end GC
- */
+// Cleanup - runs in JVM thread
+//  - free used memory
+//  - end GC
 void VM_EnhancedRedefineClasses::doit_epilogue() {
   VM_GC_Operation::doit_epilogue();
 
@@ -670,11 +654,9 @@ void VM_EnhancedRedefineClasses::doit_epilogue() {
   }
 }
 
-/**
- * Exclude java primitives and arrays from redefinition
- * @param klass_mirror  pointer to the klass
- * @return true if is modifiable
- */
+// Exclude java primitives and arrays from redefinition
+//  - klass_mirror  pointer to the klass
+//  - true if is modifiable
 bool VM_EnhancedRedefineClasses::is_modifiable_class(oop klass_mirror) {
   // classes for primitives cannot be redefined
   if (java_lang_Class::is_primitive(klass_mirror)) {
@@ -693,17 +675,12 @@ bool VM_EnhancedRedefineClasses::is_modifiable_class(oop klass_mirror) {
   return true;
 }
 
-/**
-  Load and link new classes (either redefined or affected by redefinition - subclass, ...)
-
-  - find sorted affected classes
-  - resolve new class
-  - calculate redefine flags (field change, method change, supertype change, ...)
-  - calculate modified fields and mapping to old fields
-  - link new classes
-
-  The result is sotred in _affected_klasses(old definitions) and _new_classes(new definitions) arrays.
-*/
+// Load and link new classes (either redefined or affected by redefinition - subclass, ...)
+//  - find sorted affected classes
+//  - resolve new class
+//  - calculate redefine flags (field change, method change, supertype change, ...)
+//  - calculate modified fields and mapping to old fields
+//  - link new classes
 jvmtiError VM_EnhancedRedefineClasses::load_new_class_versions(TRAPS) {
 
   _affected_klasses = new (ResourceObj::C_HEAP, mtInternal) GrowableArray<Klass*>(_class_count, true);
@@ -898,9 +875,7 @@ jvmtiError VM_EnhancedRedefineClasses::load_new_class_versions(TRAPS) {
   return JVMTI_ERROR_NONE;
 }
 
-/**
-  Calculated the difference between new and old class  (field change, method change, supertype change, ...).
-*/
+ // Calculated the difference between new and old class  (field change, method change, supertype change, ...).
 int VM_EnhancedRedefineClasses::calculate_redefinition_flags(InstanceKlass* new_class) {
   int result = Klass::NoRedefinition;
   log_info(redefine, class, load)("Comparing different class versions of class %s",new_class->name()->as_C_string());
@@ -1183,14 +1158,11 @@ int VM_EnhancedRedefineClasses::calculate_redefinition_flags(InstanceKlass* new_
 }
 
 
-/**
-  Searches for the class bytecode of the given class and returns it as a byte array.
-
-  @param the_class definition of a class, either existing class or new_class
-  @param class_bytes - if the class is redefined, it contains new class definition, otherwise just original class bytecode.
-  @param class_byte_count - size of class_bytes
-  @param not_changed - new_class not available or same as current class
-*/
+// Searches for the class bytecode of the given class and returns it as a byte array.
+//  - the_class definition of a class, either existing class or new_class
+//  - class_bytes - if the class is redefined, it contains new class definition, otherwise just original class bytecode.
+//  - class_byte_count - size of class_bytes
+//  - not_changed - new_class not available or same as current class
 jvmtiError VM_EnhancedRedefineClasses::find_class_bytes(InstanceKlass* the_class, const unsigned char **class_bytes, jint *class_byte_count, jboolean *not_changed) {
 
   *not_changed = false;
@@ -1233,11 +1205,9 @@ jvmtiError VM_EnhancedRedefineClasses::find_class_bytes(InstanceKlass* the_class
   return JVMTI_ERROR_NONE;
 }
 
-/**
-  Calculate difference between non static fields of old and new class and store the info into new class:
-     instanceKlass->store_update_information
-     instanceKlass->copy_backwards
-*/
+// Calculate difference between non static fields of old and new class and store the info into new class:
+//     instanceKlass->store_update_information
+//     instanceKlass->copy_backwards
 void VM_EnhancedRedefineClasses::calculate_instance_update_information(Klass* new_version) {
 
   class CalculateFieldUpdates : public FieldClosure {
@@ -1348,9 +1318,7 @@ void VM_EnhancedRedefineClasses::calculate_instance_update_information(Klass* ne
   }
 }
 
-/**
-  Rollback all changes - clear new classes from the system dictionary, return old classes to directory, free memory.
-*/
+// Rollback all changes - clear new classes from the system dictionary, return old classes to directory, free memory.
 void VM_EnhancedRedefineClasses::rollback() {
   log_info(redefine, class, load)("Rolling back redefinition, result=%d", _res);
   ClassLoaderDataGraph::rollback_redefinition();
@@ -1547,9 +1515,7 @@ void VM_EnhancedRedefineClasses::update_jmethod_ids() {
   }
 }
 
-/**
-  Set method as obsolete / old / deleted.
-*/
+// Set method as obsolete / old / deleted.
 void VM_EnhancedRedefineClasses::check_methods_and_mark_as_obsolete() {
   for (int j = 0; j < _matching_methods_length; ++j/*, ++old_index*/) {
     Method* old_method = _matching_old_methods[j];
@@ -1771,12 +1737,9 @@ void VM_EnhancedRedefineClasses::flush_dependent_code(InstanceKlass* k_h, TRAPS)
   }
 }
 
-/**
-  Compare _old_methods and _new_methods arrays and store the result into
-	_matching_old_methods, _matching_new_methods, _added_methods, _deleted_methods
-
-  Setup _old_methods and _new_methods before the call - it should be called for one class only!
-*/
+//  Compare _old_methods and _new_methods arrays and store the result into
+//  _matching_old_methods, _matching_new_methods, _added_methods, _deleted_methods
+//  Setup _old_methods and _new_methods before the call - it should be called for one class only!
 void VM_EnhancedRedefineClasses::compute_added_deleted_matching_methods() {
   Method* old_method;
   Method* new_method;
@@ -1900,7 +1863,6 @@ void VM_EnhancedRedefineClasses::redefine_single_class(InstanceKlass* new_class_
   }
   */
 
-
   {
     ResourceMark rm(THREAD);
     // increment the classRedefinedCount field in the_class and in any
@@ -1940,9 +1902,7 @@ void VM_EnhancedRedefineClasses::check_class(InstanceKlass* ik, TRAPS) {
   }
 }
 
-/**
- * Logging of all methods (old, new, changed, ...)
- */
+// Logging of all methods (old, new, changed, ...)
 void VM_EnhancedRedefineClasses::dump_methods() {
   int j;
   log_trace(redefine, class, dump)("_old_methods --");
@@ -2002,9 +1962,7 @@ void VM_EnhancedRedefineClasses::dump_methods() {
   }
 }
 
-/**
-  Helper class to traverse all loaded classes and figure out if the class is affected by redefinition.
-*/
+// Helper class to traverse all loaded classes and figure out if the class is affected by redefinition.
 class AffectedKlassClosure : public KlassClosure {
  private:
    GrowableArray<Klass*>* _affected_klasses;
@@ -2052,10 +2010,8 @@ class AffectedKlassClosure : public KlassClosure {
   }
 };
 
-/**
-  Find all affected classes by current redefinition (either because of redefine, class hierarchy or interface change).
-  Affected classes are stored in _affected_klasses and parent classes always precedes child class.
-*/
+// Find all affected classes by current redefinition (either because of redefine, class hierarchy or interface change).
+// Affected classes are stored in _affected_klasses and parent classes always precedes child class.
 jvmtiError VM_EnhancedRedefineClasses::find_sorted_affected_classes(TRAPS) {
   for (int i = 0; i < _class_count; i++) {
     InstanceKlass* klass_handle = get_ik(_class_defs[i].klass);
@@ -2086,9 +2042,7 @@ jvmtiError VM_EnhancedRedefineClasses::find_sorted_affected_classes(TRAPS) {
   return JVMTI_ERROR_NONE;
 }
 
-/**
-  Pairs of class dependencies (for topological sort)
-*/
+// Pairs of class dependencies (for topological sort)
 struct KlassPair {
   const Klass* _left;
   const Klass* _right;
@@ -2101,14 +2055,11 @@ static bool match_second(void* value, KlassPair elem) {
   return elem._right == value;
 }
 
-/**
- For each class to be redefined parse the bytecode and figure out the superclass and all interfaces.
- First newly introduced classes (_class_defs) are scanned and then affected classed (_affected_klasses).
- Affected flag is cleared (clear_redefinition_flag(Klass::MarkedAsAffected))
- For each dependency create a KlassPair instance. Finnaly, affected classes (_affected_klasses) are sorted according to pairs.
-
- TODO - the class file is potentionally parsed multiple times - introduce a cache?
-*/
+// For each class to be redefined parse the bytecode and figure out the superclass and all interfaces.
+// First newly introduced classes (_class_defs) are scanned and then affected classed (_affected_klasses).
+// Affected flag is cleared (clear_redefinition_flag(Klass::MarkedAsAffected))
+// For each dependency create a KlassPair instance. Finnaly, affected classes (_affected_klasses) are sorted according to pairs.
+// TODO - the class file is potentionally parsed multiple times - introduce a cache?
 jvmtiError VM_EnhancedRedefineClasses::do_topological_class_sorting(TRAPS) {
   ResourceMark mark(THREAD);
 
diff --git a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.hpp b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.hpp
index 7e2afd49650..d8a11b51fe9 100644
--- a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.hpp
+++ b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.hpp
@@ -35,17 +35,16 @@
 #include "gc/shared/vmGCOperations.hpp"
 #include "../../../java.base/unix/native/include/jni_md.h"
 
-/**
- * Enhanced class redefiner.
- *
- * This class implements VM_GC_Operation - the usual usage should be:
- *     VM_EnhancedRedefineClasses op(class_count, class_definitions, jvmti_class_load_kind_redefine);
- *     VMThread::execute(&op);
- * Which in turn runs:
- *   - doit_prologue() - calculate all affected classes (add subclasses etc) and load new class versions
- *   - doit() - main redefition, adjust existing objects on the heap, clear caches
- *   - doit_epilogue() - cleanup
-*/
+//
+// Enhanced class redefiner.
+//
+// This class implements VM_GC_Operation - the usual usage should be:
+//     VM_EnhancedRedefineClasses op(class_count, class_definitions, jvmti_class_load_kind_redefine);
+//     VMThread::execute(&op);
+// Which in turn runs:
+//   - doit_prologue() - calculate all affected classes (add subclasses etc) and load new class versions
+//   - doit() - main redefition, adjust existing objects on the heap, clear caches
+//   - doit_epilogue() - cleanup
 class VM_EnhancedRedefineClasses: public VM_GC_Operation {
  private:
   // These static fields are needed by ClassLoaderDataGraph::classes_do()
@@ -93,17 +92,15 @@ class VM_EnhancedRedefineClasses: public VM_GC_Operation {
 
   // These routines are roughly in call order unless otherwise noted.
 
-  /**
-    Load and link new classes (either redefined or affected by redefinition - subclass, ...)
-
-    - find sorted affected classes
-    - resolve new class
-    - calculate redefine flags (field change, method change, supertype change, ...)
-    - calculate modified fields and mapping to old fields
-    - link new classes
-
-    The result is sotred in _affected_klasses(old definitions) and _new_classes(new definitions) arrays.
-  */
+  // Load and link new classes (either redefined or affected by redefinition - subclass, ...)
+  //
+  // - find sorted affected classes
+  // - resolve new class
+  // - calculate redefine flags (field change, method change, supertype change, ...)
+  // - calculate modified fields and mapping to old fields
+  // - link new classes
+  //
+  // The result is sotred in _affected_klasses(old definitions) and _new_classes(new definitions) arrays.
   jvmtiError load_new_class_versions(TRAPS);
 
   // Searches for all affected classes and performs a sorting such tha
-- 
2.24.3 (Apple Git-128)

